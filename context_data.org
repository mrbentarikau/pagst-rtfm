#+title: Templates and Context Data
#+AUTHOR: caubert + jo3-l
"Go is all about type... Type is life." // William Kennedy

[[file:context_data_index.org][Index]]

* Table of Contents :TOC:QUOTE:
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:
#+BEGIN_QUOTE
- [[#context-data][Context Data]]
  - [[#channel][Channel]]
  - [[#guildserver][Guild/Server]]
  - [[#member][Member]]
  - [[#message][Message]]
  - [[#reaction][Reaction]]
  - [[#user][User]]
- [[#actions][Actions]]
  - [[#break][Break]]
  - [[#continue][Continue]]
  - [[#if-conditional-branching][If (conditional branching)]]
  - [[#range][Range]]
  - [[#return][Return]]
  - [[#try-catch][Try-catch]]
  - [[#while][While]]
  - [[#with][With]]
- [[#associated-templates][Associated Templates]]
  - [[#definition][Definition]]
  - [[#execution][Execution]]
- [[#custom-types][Custom Types]]
  - [[#templatessdict][templates.SDict]]
  - [[#templatesslice][templates.Slice]]
- [[#database][Database]]
  - [[#dbentry][DBEntry]]
- [[#tickets][Tickets]]
  - [[#template-ticket][Template Ticket]]
- [[#time][Time]]
#+END_QUOTE

* Context Data
Context data refers to information accessible via the dot, ~{{ . }}~. The accessible data ranges from useful constants to information regarding the environment in which the custom command was executed, such as the user that ran it, the channel it was ran in, and so on.
Fields documented as accessible on specific structures, like the context user .User, are usable on all values that share the same type. That is, given a user $user, $user.ID is a valid construction that yields the ID of the user. Similarly, provided a channel $channel, $channel.Name gives the name of the channel.

|--------------+--------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| Field        | Description                                                                                                                                      | PAGST      |
|--------------+--------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| .BotUser     | Gives bot's user object.                                                                                                                         |            |
| .CCID        | The ID of currently executing custom command in type of /int64/.                                                                                 |            |
| .CCNote      | The optional description on what CC does.                                                                                                        | \checkmark |
| .CCRunCount  | Shows run count of triggered custom command, although this is not going to be 100% accurate as it's cached up to 30 minutes.                     |            |
| .CCTrigger   | If trigger type has a printable trigger, prints out its name. For example, if trigger type is regex and trigger is set to \A, it would print \A. |            |
| .DomainRegex | Returns string value of in-built domain-matching regular expression.                                                                             |            |
| .GuildPrefix | Returns active command prefix for the guild. Has an alias .ServerPrefix                                                                          |            |
| .IsPremium   | Returns boolean true/false whether guild is premium of PASTDB or not.                                                                            |            |
| .LinkRegex   | Returns string value of in-built link-matching regular expression.                                                                               |            |
| .ModlogID    | Channel's ID where moderation modlog is sent.                                                                                                    | \checkmark |
| .Permissions | Returns all mapped-out permission bits available for Discord in their bitshifted decimal values.                                                 |            |
| .ReportlogID | Channel's ID where moderation reports are sent.                                                                                                  | \checkmark |
| .ThanksRegex | Returns string value of in-built thanks-matching regex.                                                                                          | \checkmark |

** Channel
:PROPERTIES:
:CUSTOM_ID: channel
:END:

|------------------------------+--------------------------------------------------------------------------------------------+--------------|
| Field                        | Description                                                                                | PAGST        |
|------------------------------+--------------------------------------------------------------------------------------------+--------------|
| .Channel.Bitrate             | Bitrate used; only set on voice channels.                                                  |              |
| .Channel.GuildID             | Guild ID of the channel.                                                                   |              |
| .Channel.ID                  | The ID of the channel.                                                                     |              |
| .Channel.IsPrivate           | Whether the channel is private.                                                            |              |
| .Channel.IsThread            | Whether the channel is a thread.                                                           |              |
| .Channel.Mention             | Mentions the channel object.                                                               |              |
| .Channel.Name                | The name of the channel.                                                                   |              |
| .Channel.NSFW                | Outputs whether this channel is NSFW or not.                                               |              |
| .Channel.OwnerID             | ID of the creator of the group DM or thread                                                | \checkmark   |
| .Channel.ParentID            | The ID of the channel's parent (category), returns 0 if none.                              |              |
| .Channel.PermissionOverwrite | A slice of [[https://discord.com/developers/docs/resources/channel#overwrite-object][permission overwrite]] structures applicable to the channel.                      |              |
| .Channel.Position            | Channel position from top-down.                                                            |              |
| .Channel.RateLimitPerUser    | Returns the amount of seconds a user has to wait before sending another message (0-21600). | \checkmark   |
| .Channel.Topic               | The topic of the channel.                                                                  |              |
| .Channel.Type                | The type of the channel.                                                                   |              |

[[https://discordapp.com/developers/docs/resources/channel#channel-object][Channel object in Discord documentation]].\\
Channel functions are covered in [[https://github.com/mrbentarikau/pagstrtfm/blob/master/functions.org#channel][functions]].

[[#table-of-contents][back to TOC]]
** Guild/Server

|------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| Field                              | Description                                                                                                                                                                                 | PAGST      |
|------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+------------|
| .Guild.AfkChannelID                | Outputs the AFK channel ID.                                                                                                                                                                 |            |
| .Guild.AfkTimeout                  | Outputs the time when a user gets moved into the AFK channel while not being active.                                                                                                        |            |
| .Guild.Channels                    | Outputs a slice of channels in the guild with type /[]dstate.ChannelState./                                                                                                                 |            |
| .Guild.DefaultMessageNotifications | Outputs the default message notification setting for the guild.                                                                                                                             |            |
| .Guild.Emojis                      | Outputs a list of emojis in the guild with type /discordgo.Emoji/.                                                                                                                          |            |
| .Guild.ExplicitContentFilter       | Outputs the explicit content filter level for the guild.                                                                                                                                    |            |
| .Guild.Features                    | The list of enabled guild features of type /[]string/.                                                                                                                                      |            |
| .Guild.Icon                        | Outputs the [[https://discordapp.com/developers/docs/reference#image-formatting][icon hash]] ID of the guild's icon. Setting full icon URL is explained [[https://discord.com/developers/docs/reference#image-formatting][here]].                                                                                                      |            |
| .Guild.ID                          | Outputs the ID of the guild.                                                                                                                                                                |            |
| .Guild.MemberCount                 | Outputs the number of users on a guild.                                                                                                                                                     |            |
| .Guild.MfaLevel                    | Required [[https://discordapp.com/developers/docs/resources/guild#guild-object-mfa-level][MFA level]] for the guild. If enabled, members with moderation powers will be required to have 2-factor authentication enabled in order to exercise moderation powers.               |            |
| .Guild.Name                        | Outputs the name of the guild.                                                                                                                                                              |            |
| .Guild.OwnerID                     | Outputs the ID of the owner.                                                                                                                                                                |            |
| .Guild.PreferredLocale             | The preferred locale of a guild with the "PUBLIC" feature; used in server discovery and notices from Discord; defaults to "en-US".                                                          |            |
| .Guild.Prefix                      | Command prefix guild uses, also as .GuildPrefix/.ServerPrefix.                                                                                                                              | \checkmark |
| .Guild.Roles                       | Outputs all roles and indexing them gives more information about the role. For example ~{{len .Guild.Roles}}~ gives you how many roles are in that guild. Role struct has [[https://discordapp.com/developers/docs/topics/permissions#role-object][following fields]]. |            |
| .Guild.Splash                      | Outputs the [[https://discordapp.com/developers/docs/reference#image-formatting][splash hash]] ID of the guild's splash.                                                                                                                                           |            |
| .Guild.SystemChannelID             | The id of the channel where guild notices such as welcome messages and boost events are posted.                                                                                             |            |
| .Guild.Threads                     | Returns all active threads and their partial data in the guild as a slice of type /[]dstate.ChannelState/.                                                                                  |            |
| .Guild.VerificationLevel           | Outputs the required verification level for the guild.                                                                                                                                      |            |
| .Guild.VoiceStates                 | Outputs a /slice/ of [[https://discord.com/developers/docs/resources/voice#voice-state-object][voice states]] (users connected to VCs) with type /[]discordgo.VoiceState/.                                                                                              |            |
| .Guild.WidgetChannelID             | Outputs the channel ID for the server widget.                                                                                                                                               |            |
| .Guild.WidgetEnabled               | Outputs whether or not the server widget is enabled.                                                                                                                                        |            |


|-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Method                                                      | Description                                                                                                                                                                                                                                                                                                     |
|-------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~.Guild.GetChannel~ id                                      | Gets the channel with the ID provided, returning a /*dstate.ChannelState/.                                                                                                                                                                                                                                      |
| ~.Guild.GetEmoji~ id                                        | Gets the guild emoji with the ID provided, returning a /*discordgo.Emoji/.                                                                                                                                                                                                                                      |
| ~.Guild.GetMemberPermissions~ channelID memberID memberRole | Calculates full [[https://discord.com/developers/docs/topics/permissions][permissions]] that the member has in the channel provided, taking  into account the roles of the member. Example: ~{{.Guild.GetMemberPermissions .Channel.ID .Member.User.ID .Member.Roles}}~ would retrieve the permissions integer the triggering member has in the context/triggering channel. |
| ~.Guild.GetRole~ id                                         | Gets the [[https://discord.com/developers/docs/topics/permissions#role-object][role object]] with the integer ID provided, returning a struct of type /*discordgo.Role/.                                                                                                                                                                                                                |
| ~.Guild.GetvoiceState~ userID                               | Gets the voice state of the user ID provided, returning a /*discordgo.VoiceState/.                                                                                                                                                                                                                              |
[[https://discordapp.com/developers/docs/resources/guild#guild-object][Guild object in Discord documentation]].

[[#table-of-contents][back to TOC]]

** Member

|--------------------------+------------------------------------------------------------------------------------------------------------------------+------------|
| Field                    | Description                                                                                                            | PAGST      |
|--------------------------+------------------------------------------------------------------------------------------------------------------------+------------|
| .Member.Avatar           | Member's avatar hash, if it is custom per server, then custom avatar hash.                                             |            |
| .Member.GuildID          | The guild ID on which the member exists.                                                                               |            |
| .Member.JoinedAt         | When member joined the guild/server of type /discordgo.Timestamp/. Method .Parse will convert this to type /time.Time/ |            |
| .Member.Nick             | The nickname for this member.                                                                                          |            |
| .Member.Pending          | Returns /bool/ true\slash{}false whether user is pending behind Discord's screening process.                           |            |
| .Member.Roles            | A /slice/ of role IDs that the member has.                                                                             |            |
| .Member.TimeoutExpiresAt | Returns /time.Time/ when member's time out expires. Time in the past or nil is if the user is not timed out.           |            |
| .Member.User             | Underlying user object on which the member is based on.                                                                |            |


|-------------------------+--------------------------------------------------------------------------------------------------------------+-------|
| Method                  | Description                                                                                                  | PAGST |
|-------------------------+--------------------------------------------------------------------------------------------------------------+-------|
| .Member.AvatarURL "256" | Gives the URL for member's avatar, argument "256" is the size of the picture and increases/decreses twofold. |       |

[[https://discordapp.com/developers/docs/resources/guild#guild-member-object][Member object in Discord documentation]].\\
Member functions are covered in [[file:functions.org][functions]].

[[#table-of-contents][back to TOC]]
** Message

|--------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------|
| Field                                | Description                                                                                                                                                     | PAGST        |
|--------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+--------------|
| .Message.Attachments                 | Attachments of this message (/slice/ of attachment objects).                                                                                                    |              |
| .Message.Author                      | Author of the message ([[#user][User object]]).                                                                                                                            |              |
| .Message.ChannelID                   | Channel's ID this message is in.                                                                                                                                |              |
| .Message.Content                     | Text content on this message.                                                                                                                                   |              |
| .Message.ContentWithMentionsReplaced | .ContentWithMentionsReplaced will replace all <@ID> mentions with the username of the mention.                                                                  |              |
| .Message.EditedTimestamp             | The time at which the last edit of the message occurred, if it has been edited. As with .Message.Timestamp, it is of type /discordgo.Timestamp/.                |              |
| .Message.Embeds                      | Embeds of this message (slice of embed objects).                                                                                                                |              |
| .Message.GuildID                     | Guild ID in which the message is.                                                                                                                               |              |
| .Message.ID                          | ID of the message.                                                                                                                                              |              |
| .Message.Interaction                 | Returns message [[https://discord.com/developers/docs/interactions/receiving-and-responding#message-interaction-object][interaction object]].                                                                                                                             |              |
| .Message.Link                        | Discord link to the message.                                                                                                                                    |              |
| .Message.Member                      | [[#member][Member object]].                                                                                                                                                  |              |
| .Message.MentionEveryone             | Whether the message mentions everyone, returns /bool/ true\slash{}false.                                                                                        |              |
| .Message.MentionRoles                | The roles mentioned in the message, returned as a slice of type /discordgo.IDSlice/.                                                                            |              |
| .Message.Mentions                    | Users this message mentions, returned as a slice of type /[]*discordgo.User/.                                                                                   |              |
| .Message.MessageReference            | DiscordGo's version for referenced message, acts like .ReferencedMessage without erroring out.                                                                  | \checkmark{} |
| .Message.Pinned                      | Whether this message is pinned.returns /bool/ true\slash{}false.                                                                                                |              |
| .Message.Reactions                   | Reactions on this message, returned as a slice of type []*discordgo.MessageReactions.                                                                           |              |
| .Message.ReferencedMessage           | Message object associated by message_reference, like a message that was replied to.                                                                             |              |
| .Message.Stickers                    | Slice of Discord stickers.                                                                                                                                      | \checkmark{} |
| .Message.Timestamp                   | Timestamp of the message in type /discordgo.Timestamp/ (use ~.Message.Timestamp.Parse~ to get type /time.Time/ and .Parse.String method returns type /string/). |              |
| .Message.TTS                         | Whether the message is text-to-speech. *                                                                                                                        |              |
| .Message.Type                        | The [[https://discordapp.com/developers/docs/resources/channel#message-object-message-types][type]] of the message.                                                                                                                                        |              |
| .Message.WebhookID                   | If the message is generated by a webhook, this is the webhook's id                                                                                              |              |


|--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Field        | Description                                                                                                                                                                                                                                                                 |
|--------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| .Args        | List of everything that is passed to .Message.Content. .Args is a /slice/ of type string.                                                                                                                                                                                   |
| .Cmd         | .Cmd is of type /string/ and shows all arguments that trigger custom command, part of .Args. Starting from ~{{index .Args 0}}~.                                                                                                                                             |
| .CmdArgs     | List of all the arguments passed after .Cmd (.Cmd is the actual trigger) .CmdArgs is a /slice/ of type string. For example ~{{$allArgs := (joinStr " " .CmdArgs)}}~ saves all the arguments after trigger to a variable $allArgs.                                           |
| .StrippedMsg | "Strips" or cuts off the triggering part of the message and prints out everything else after that. Bear in mind, when using regex as trigger, for example ~day~ and input message is ~Have a nice day my dear PAG!~ output will be ~my dear PAG!~  - rest is cut off. |

\star{} denotes field that will not have proper return when using ~getMessage~ function.

[[https://discordapp.com/developers/docs/resources/channel#message-object][Message object in Discord documentation]].\\
Message functions are covered in [[https://github.com/mrbentarikau/pagstrtfm/blob/master/functions.org#message][functions]].

[[#table-of-contents][back to TOC]]
** Reaction

This is available and part of the dot only when the reaction trigger type is beign used.

|-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Field                         | Description                                                                                                                                                                                                                                                                            |
|-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| .Reaction                     | Returns reaction object which has following fields ~UserID, MessageID, Emoji.(ID/Name/...), ChannelID, GuildID~. The ~Emoji.ID~ is the ID of the emoji for custom emojis, and ~Emoji.Name~ will hold the Unicode emoji if its a default one. (otherwise the name of the custom emoji). |
| .Reaction.Emoji.APIName       | Returns type /string/, a correctly formatted API name for use in the MessageReactions endpoints. For custom emojis it is ~emojiname:ID~.                                                                                                                                               |
| .Reaction.Emoji.MessageFormat | Returns a correctly formatted emoji for use in Message content and embeds. It's equal to ~<:.Reaction.Emoji.APIName>~ and ~<a:.Reaction.Emoji.APIName>~ for animated emojis.                                                                                                           |
| .ReactionAdded                | Returns a boolean type /bool/ true\slashfalse indicating whether reaction was added or removed.                                                                                                                                                                                        |
| .ReactionMessage              | Returns the message object reaction was added to. ~{{range .ReactionMessage.Reactions}} {{.Count}} - {{.Emoji.Name}} {{end}}~ Returns emoji count and their name. Has an alias ~.Message~ and it works the same way.                                                                   |


[[https://discordapp.com/developers/docs/resources/channel#reaction-object][Reaction object in Discord documentation]].\\
[[https://discord.com/developers/docs/resources/emoji][Emoji object in Discord documentation]].

[[#table-of-contents][back to TOC]]
** User

|---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| Field               | Description                                                                                                                                      |
|---------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| .User               | The user's username together with discriminator.                                                                                                 |
| .User.Avatar        | The user's avatar [[https://discord.com/developers/docs/reference#image-formatting][hash]].                                                                                                                          |
| .User.Bot           | Determines whether the target user is a bot - if yes, it will return ~true~.                                                                     |
| .User.Discriminator | The user's discriminator/tag (The four digits after a person's username).                                                                        |
| .User.ID            | The user's ID.                                                                                                                                   |
| .User.Mention       | Mentions user.                                                                                                                                   |
| .User.String        | The user's username together with discriminator as /string/ type.                                                                                |
| .User.Username      | The user's username.                                                                                                                             |
| .UsernameHasInvite  | Only works with join and leave messages (not join dms). It will determine does the username contain an invite link.                              |
| .RealUsername       | Only works with join and leave messages (not join DMs). This can be used to send the real username to a staff channel when invites are censored. |


|-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
| Method                | Description                                                                                                                                    |
|-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
| .User.AvatarURL "256" | Gives the URL for user's avatar, argument "256" is the size of the picture and can increase/decrease twofold (e.g. 512, 1024 or 128, 64 etc.). |

[[https://discordapp.com/developers/docs/resources/user#user-object][User object in Discord documentation.]]\\
User functions are covered in [[https://github.com/mrbentarikau/pagstrtfm/blob/master/functions.org#user][functions]].

[[#table-of-contents][back to TOC]]
* Actions
Actions, or elements enclosed in double braces ~{{  }}~, are what makes templates dynamic. Without them, templates would be no more than static text. In this section, we introduce several special kinds of actions which affect the control flow of the program. For example, iteration actions like ~range~ and ~while~ permit statements to be executed multiple times, while conditional actions like ~if~ and ~with~ allow for alteration of what statements are ran or are not ran.

** Break
The innermost ~pipeline~ loop is ended early, stopping the current iteration and bypassing all remaining iterations.
** Continue
The current iteration of the innermost ~pipeline~ loop is stopped, and the loop starts the next iteration.
** If (conditional branching)
Branching using ~if~ action's pipeline and comparison operators - these operators don't need to be inside ~if~ branch. ~if~ statements always need to have an enclosing ~end~.
Learning resources covers conditional branching [[https://learn.yagpdb.xyz/beginner/control_flow_1][more in depth]].

ProTip\trade\\
~eq~ , though often used with 2 arguments (eq x y) can actually be used with more than 2. If there are more than 2 arguments, it checks whether the first argument is equal to any one of the following arguments. This behaviour is unique to ~eq~.


Information\\
Comparison operators always require the same type: i.e comparing ~1.23~ and ~1~ would throw *incompatible types for comparison* error as they are not the same type (one is float, the other int). To fix this, you should convert both to the same type -> for example, ~toFloat 1~.


|---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Case    | Example                                                                                                                                                                                                                                                         |
|---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| if      | ~{{if (condition)}} output {{end}}~ Initialization statement can also be inside ~if~ statement with conditional statement, limiting the initialized scope to that ~if~ statement. ~{{$x := 24}} {{if eq ($x := 42) 42}} Inside: {{$x}} {{end}} Outside: {{$x}}~ |
| else if | ~{{if (condition)}} output1 {{else if (condition)}} output2 {{end}}~ You can have as many ~else if~ statements as many different conditionals you have.                                                                                                         |
| else    | ~{{if (condition)}} output1 {{else}} output2 {{end}}~                                                                                                                                                                                                           |


|---------------+-----------------------------------------------------|
| Boolean logic |                                                     |
|---------------+-----------------------------------------------------|
| and           | ~{{if and (cond1) (cond2) (cond3)}} output {{end}}~ |
| not           | ~{{if not (condition)}} output {{end}}~             |
| or            | ~{{if or (cond1) (cond2) (cond3)}} output {{end}}~  |


|-----------------------------+--------------------------------------------------------|
| Comparison operators        |                                                        |
|-----------------------------+--------------------------------------------------------|
| Equal: ~eq~                 | ~{{if eq .Channel.ID ########}} output {{end}}~        |
| Not equal: ~ne~             | ~{{$x := 7}} {{$y := 8}} {{ne $x $y}}~ returns ~true~  |
| Less than: ~lt~             | ~{{if lt (len .Args) 5}} output {{end}}~               |
| Less than or equal: ~le~    | ~{{$x := 7}} {{$y := 8}} {{le $x $y}}~ returns ~true~  |
| Greater than: ~gt~          | ~{{if gt (len .Args) 1}} output {{end}}~               |
| Greater than or equal: ~ge~ | ~{{$x := 7}} {{$y := 8}} {{ge $x $y}}~ returns ~false~ |
[[#table-of-contents][back to TOC]]

** Range
~range~ iterates over element values in variety of data structures in pipeline - slices/arrays, maps or channels. The dot ~.~ is set to successive elements of those data structures and output will follow execution. If the value of pipeline has zero length, nothing is output or if an ~{{else}}~ action is used, that section will be executed.\\

To skip execution of a single iteration and jump to the next iteration, the ~continue~ action may be used. Likewise, if one wishes to skip all remaining iterations, the ~break~ action may be used.

Affected dot inside ~range~ is important because methods mentioned above in this documentation: ~.Server.ID~, ~.Message.Content~ etc are all already using the dot on the pipeline and if they are not carried over to the ~range~ control structure directly, these fields do not exists and template will error out. Getting those values inside ~range~ and also ~with~ action would need ~$.User.ID~ for example.

~range~ on slices/arrays provides both the index and element for each entry; ~range~ on map iterates over key/element pairs. If a ~range~ action initializes a variable, that variable is set to the successive elements of the iteration. ~range~ can also declare two variables, separated by a comma and set by index and element or key and element pair. In case of only one variable, it is assigned the element.

Like ~if~, ~range~ is concluded with ~{{end}}~ action and declared variable scope inside range extends to that point.

#+BEGIN_SRC go
{{/* range over a slice */}}
{{ range $index, $element := cslice "PAGSTDB" "IS COOL!" }}
{{ $index }} : {{ $element }} {{ end }}
{{/* range on a map */}}
{{ range $key, $value := dict "SO" "SAY" "WE" "ALL!" }}
{{ $key }} : {{ $value }} {{ end }}
{{/* range with else and variable scope */}}
{{ range seq 1 1 }} no output {{ else }} output here {{ end }}
{{ $x := 42 }} {{ range $x := seq 2 4 }} {{ $x }} {{ end }} {{ $x }}
#+END_SRC

Attention!\\
*Custom command response was longer than 2k (contact an admin on the server...)*
This is quite common error users will get whilst using range. Simple example to reproduce it:
#+begin_src go
{{ range seq 0 1000 }}
{{ $x := . }}
{{ end }}
HELLO!
#+end_src
This will happen because of whitespaces and newlines, so make sure you one-line the range or trim spaces, in this context ~{{- $x := . -}}~
[[#table-of-contents][back to TOC]]
** Return
Stop execution of the current template. Using ~{{return pipeline}}~ stops execution of the current template and returns the result of evaluating the pipeline to the caller.
** Try-catch
Multiple template functions have the possibility of returning an error upon failure. For example, ~dbSet~ can return a short write error if the size of the database entry exceeds some threshold.

While it is possible to write code that simply ignores the possibility of such issues occuring (letting the error stop the code completely), there are times at which one may wish to write more robust code that handles such errors gracefully. The ~try-catch~ construct enables this possibility.

Similar to an ~if~ action with an associated ~else~ branch, the ~try-catch~ construct is composed of two blocks: the ~try~ branch and the ~catch~ branch. First, the code in the ~try~ branch is ran, and if an error is raised by a function during execution, the ~catch~ branch is executed instead with the context (~.~) set to the offending error.

To check for a specific error, one can compare the result of the ~Error~ method with a predetermined message. (For context, all errors have a method Error which is specified to return a message describing the reason that the error was thrown.) For example, the following example has different behavior depending on whether "Reaction blocked" is in the message of the error caught.
#+BEGIN_SRC go
{{ try }}
    {{ addReactions ":hearts:" }}
    added reactions successfully
{{ catch }}
    {{ if in .Error "Reaction blocked" }}
        user blocked PAGSTDB :(
    {{ else }}
        different issue occurred: {{ .Error }}
    {{ end }}
{{ end }}
#+END_SRC
[[#table-of-contents][back to TOC]]
** While
~while~ iterates as long as the specified condition is ~true~, or more generally evaluates to a non-empty value. The dot (~.~) is not affected, unlike with the ~range~ action. Analogous to ~range~, ~while~ introduces a new scope which is concluded by the ~end~ action. Within the body of a ~while~ action, the ~break~ and ~continue~ actions can be used to appropriate effect, like in a ~range~ action.
#+BEGIN_SRC go
{{/* efficiently search for an element in a sorted slice using binary search */}}
{{ $xs := cslice 1 3 5 6 6 8 10 12 }}
{{ $needle := 8 }}

{{ $lo := 0 }}
{{ $hi := sub (len $xs) 1 }}
{{ $found := false }}
{{/* it's possible to combine multiple conditions using logical operators */}}
{{ while and (le $lo $hi) (not $found) }}
	{{- $mid := div (add $lo $hi) 2 }}
	{{- $elem := index $xs $mid }}
	{{- if lt $elem $needle }}
		{{- $lo = add $mid 1 }}
	{{- else if eq $elem $needle }}
		{{- print "found at index " $mid }}
		{{- $found = true }}
	{{- else }}
		{{- $hi = sub $mid 1 }}
	{{- end -}}
{{ end }}
{{ if not $found }} not found {{ end }}
#+END_SRC
[[#table-of-contents][back to TOC]]
** With
~with~ lets you assign and carry pipeline value with its type as a dot (~.~) inside that control structure, it's like a shorthand. If the value of the pipeline is empty, dot is unaffected and when an ~else~ or ~else if~ action is used, execution moves on to those branches instead, similar to the ~if~ action.

Affected dot inside ~with~ is important because methods mentioned above in this documentation: ~.Server.ID~, ~.Message.Content~ etc are all already using the dot on the pipeline and if they are not carried over to the ~with~ control structure directly, these fields do not exists and template will error out. Getting those values inside ~with~ and also ~range~ action would need ~$.User.ID~ for example.

Like ~if~ and ~range~ actions, ~with~ is concluded using ~{{end}}~ and variable scope extends to that point.
#+BEGIN_SRC go
{{/* Shows the scope and how dot is affected by object's value in pipeline */}}
{{ $x := "42" }} {{ with and ($z:= seq 0 5) ($x := seq 0 10) }}
len $x: `{{ len $x }}`
{{/* "and" function uses $x as last value for dot */}}
same as len dot: `{{ len . }}`
but len $z is `{{ len $z }}` {{ end }}
Outer-scope $x len however: {{ len $x }}
{{/* when there's no value, dot is unaffected */}}
{{ with false }} dot is unaffected {{ else }} printing here {{ .CCID }} {{ end }}
{{/* using else-if chain is possible */}}
{{ with false }}
    not executed
{{ else if eq $x "42" }}
    x is 42, dot is unaffected {{ .User.Mention }}
{{ else if eq $x "43" }}
    x is not 43, so this is not executed
{{ else }}
    branch above already executed, so else branch is not
{{ end }}
#+END_SRC
[[#table-of-contents][back to TOC]]
* Associated Templates
Templates (i.e., custom command programs) may also define additional helper templates that may be invoked from the main template. Technically speaking, these helper templates are referred to as associated templates. Associated templates can be used to create reusable procedures accepting parameters and outputting values, similar to functions in other programming languages.
** Definition
To define an associated template, use the ~define~ action. It has the following syntax:
*Warning!*: Template definitions must be at the top level of the custom command program; in other words, they cannot be nested in other actions (for example inside an ~if~ action.) That is, the following custom command is invalid:
#+BEGIN_SRC go
{{ if $cond }}
    {{ define "hi" }} hi! {{ end }}
{{ end }}
#+END_SRC
The template name can be any string constant; however, it cannot be a variable, even if said variable references a value of string type. As for the body of the associated template body, it can be anything that is a standalone, syntactically valid template program. Note that the first criterion precludes using variables defined outside of the associated template; that is, the following custom command is invalid, as the body of the associated template references a variable (~$name~) defined in an outer scope:
#+BEGIN_SRC go
{{ $name := "PAGST" }}
{{ define "hello" }}
    Hello, {{ $name }}!
{{ end }}
#+END_SRC
If accessing the value of ~$name~ is desired, then it needs to be passed as part of the context when executing the associated template.

Within the body of an associated template, the variable ~$~ and the context dot (~.~) both initially refer to the data passed as context during execution. Consequently, any data on the original context that needs to be accessed must be explicitly provided as part of the context data. For example, if one wishes to access ~.User.Username~ in an associated template body, it is necessary to pass ~.User.Username~ as part of the context data when executing said template.

To return a value from an associated template, use the ~return~ action. Encountering a ~return~ action will cause execution of the associated template to end immediately and control to be returned to the caller. For example, below is an associated template that always returns ~1~:
#+BEGIN_SRC go
{{ define "getOne" }} {{ return 1 }} {{ end }}
#+END_SRC
Note that it is not necessary for a value to be returned; ~{{ return }}~ by itself is completely valid.

*NB!*: Since all custom commands are themselves templates, using a return action at the top level is perfectly valid, and will result in execution of the custom command being stopped at the point the return is encountered.
#+BEGIN_SRC go
{{ if not .CmdArgs }}
    no arguments passed
    {{ return }} {{/* anything beyond this point is not executed */}}
{{ end }}
{{ $firstArg := index .CmdArgs 0 }}
{{/* safe since .CmdArgs is guaranteed to be non-empty here */}}
#+END_SRC
[[#table-of-contents][back to TOC]]
** Execution
To execute a custom command, one of three methods may be used: ~template~, ~block~, or ~execTemplate~.
*** Template action
~template~ is a function-like action that executes the associated template with the name provided, ignoring its return value. Note that the name of the template to execute must be a string constant; similar to ~define~ actions, a variable referencing a value of string type is invalid. Data to use as the context may optionally be provided following the name.

Although ~template~ is function-like, it is not an actual function, leading to certain quirks; notably, it must be used alone, not part of another action (like a variable declaration), and the data argument need not be parenthesized. Due to this, it is recommended that ~execTemplate~, which has much more intuitive behavior, be used instead of the ~template~ action if at possible.

Below is an example of tthe ~template~ action:
#+BEGIN_SRC go
{{ define "sayHi" }}
    {{ if . }}
        hi there, {{ . }}
    {{ else }}
        hi there!
    {{ end }}
{{ end }}
{{ template "sayHi" }} {{/* hi there! */}}
{{ template "sayHi" "PAGST" }} {{/* hi there, PAGST */}}
#+END_SRC
Trim markers: ~{{- ... -}}~ were used in above example because whitespace is considered as part of output for associated template definitions (and actions in general).\\
[[#table-of-contents][back to TOC]]
*** Block action
~block~ has a structure similar to that of a ~define~ action. It is equivalent to a ~define~ action followed by a ~template~ action:
#+BEGIN_SRC go
{{ $name := "PAGST" }}
{{ block "sayHi" $name }}
    hi there, {{ . }}
{{ end }}

{{/* equivalent to above */}}
{{ define "sayHi" }}
    hi there, {{ . }}
{{ end }}
{{ template "sayHi" $name }}
#+END_SRC
[[#table-of-contents][back to TOC]]
*** execTemplate function
~execTemplate~ is essentially the same as the ~template~ action, but provides access to the return value of the template and may be used as part of another action. Below is an example using ~execTemplate~:
#+BEGIN_SRC go
{{ define "factorial" }}
    {{- $n := 1 }}
    {{- range seq 2 (add . 1) }}
        {{- $n = mult $n . }}
    {{- end }}
    {{- return $n -}}
{{ end }}

{{ $fac := execTemplate "factorial" 5 }}
2 * 5! = {{ mult $fac 2 }}
#+END_SRC
[[#table-of-contents][back to TOC]]
* Custom Types
Golang has built-in primitive data types (/int/, /string/, /bool/, /float64/, ...) and built-in composite data types (/array/, /slice/, /map/, ...) which also are used in custom commands.

PAGSTDB's templating "engine" has currently two user-defined, custom data types - /templates.SDict/ and /templates.Slice/. There are other custom data types used like /discordgo.Timestamp/, but these are outside of the main code of PAGSTDB, so not explained here further. Type /time.Time/ is covered in its own section.

Custom Types section discusses functions that initialize values carrying those /templates.Slice/ (abridged to /cslice/), /templates.SDict/ (abridged to /sdict/) types and their methods. Both types handle type /interface{}/ element. It's called an empty interface which allows a value to be of any type. So any argument of any type given is handled. (In "custom commands"-wise mainly primitive data types, but /slices/ as well.)


Attention!\\
*Reference type-like behaviour*: Slices and dictionaries in CCs exhibit reference-type like behavior, which may be undesirable in certain situations. That is, if you have a variable $x that holds a slice/dictionary, writing $y := $x and then mutating $y via Append/Set/Del/etc. will modify $x as well. For example:
#+BEGIN_SRC go
{{ $x := sdict "k" "v" }}
{{ $y := $x }}
{{ $y.Set "k" "v2" }} {{/* modify $y */}}
{{ $x }}
{{/* k has value v2 on $x as well -
that is, modifying $y changed $x too. */}}
#+END_SRC

If this behaviour is undesirable, copy the slice/dictionary via cslice.AppendSlice or a range + Set call .
#+BEGIN_SRC go
{{ $x := sdict "k" "v" }}
{{ $y := sdict }}
{{ range $k, $v := $x }} {{- $y.Set $k $v -}} {{ end }}
{{ $y.Set "k" "v2" }}
{{ $x }} {{/* $x is unmodified - k still has value v */}}
#+END_SRC
Note that this performs a shallow copy, not a deep copy - if you want the latter you will need to perform the aforementioned operation recursively.
** templates.SDict
/templates.SDict/ - This is a custom composite data type defined on an underlying data type /map[string]interface{}/. This is of kind /map/ having /string/ type as its key and /interface{}/ type as that key's value and can be  initialized using ~sdict~ function. A map is key-value store. This means you store value and you access that value by a key. Map is an unordered list and the number of parameters to form key-value pairs must be even, difference to regular map is that /templates.SDict/ is ordered by its key. Retrieving specific element inside /templates.Sdict/ is by indexing its key.

||
| Function                                | Description|
||
| ~sdict~ "key1" value1 "key2" value2 ...  | Like ~dict~ function, creating a /templates.SDict/ type map, key must be of type /string/. Can be used for example in ~cembed~. If only one argument is passed to ~sdict~ function having type /map[string]interface{}/; for example .ExecData and data retrieved from database can be of such type if ~sdict~ was used, it is converted to a new /sdict/. Example: ~sdict "one" 1 "two" 2 "three" (cslice 3 4) "five" 5.5~ returns unordered ~map[five:5.5 one:1 three:[3 4] two:2]~, having length of four and index positions are its keys. Notice that thanks to type /interface{}/ value, /templates.SDict/ elements' inherent type does not change.  |


|------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------|
| Method           | Description                                                                                                                                           |
|------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------|
| .Del "key"       | Deletes given key from /sdict/.                                                                                                                       |
| .Get "key"       | Retrieves given key from /sdict/.                                                                                                                     |
| .HasKey "key"    | Returns /bool/ true\slash{}false regarding whether the key is set or not e.g. ~{{(sdict "PAGSTDB" "is cool").HasKey "PAGSTDB"}}~ would return ~true~. |
| .Set "key" value | Changes\slash{}sets given key to a new value or creates new one, if no such key exists in /sdict/.                                                    |

#+BEGIN_SRC go
Creating sdict: {{ $x := sdict "color1" "green" "color2" "red" }} **{{ $x }}**
Retrieving key "color2": **{{ $x.Get "color2" }}**
Changing "color2" to "yellow": {{ $x.Set "color2" "yellow" }} **{{ $x }}**
Adding "color3" as "blue": {{ $x.Set "color3" "blue" }} **{{ $x }}**
Deleting key "color1" {{ $x.Del "color1" }} and whole sdict: **{{ $x }}**
#+END_SRC

TIP!\\
Previously, when saving values from ~cslice~, ~sdict~, and ~dict~ functions into database, they were serialized into their underlying native types - /slices/ and /maps/. This meant that if you wanted to get the custom type back, you needed to convert manually, e.g. ~{{cslice.AppendSlice $dbSlice}}~ or ~{{sdict $dbDict}}~. Recent changes to PAGSTDB have changed this: values with custom types are now serialized properly, making manual conversion unnecessary.

[[#table-of-contents][back to TOC]]

** templates.Slice
/templates.Slice/ - This is a custom composite data type defined using an underlying data type /[]interface{}/ . It is of kind /slice/ (similar to /array/) having /interface{}/ type as its value and can be initialized using ~cslice~ function. Retrieving specific element inside /templates.Slice/ is by indexing its position number.

|----------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Function                   | Description                                                                                                                                                                                                                                                                                                                                                                        |
|----------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~cslice~ value1 value2 ...  | Function creates a slice of type /templates.Slice/ that can be used elsewhere (as an argument for ~cembed~ and ~sdict~ for example). Example: ~cslice 1 "2" (dict "three" 3) 4.5~ returns ~[1 2 map[three:3] 4.5]~, having length of 4 and index positions from 0 to 3. Notice that thanks to type /interface{}/ value, /templates.Slice/ elements' inherent type does not change. |


||
| Mehtod                   | Description| PAGST        |
||
| .Append arg              | Creates a new /cslice/ having given argument appended fully by its type to current value. Has max size of 10 000 length.                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |              |
| .AppendSlice arg         | Creates a new /cslice/ from argument of type /slice/ appended\slash{}joined with current value. Has max size of 10 000 length.                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |              |
| .Del int                 | Deletes value from slice at given position| \checkmark{} |
| .Set int value           | Changes\slash{}sets given /int/ argument as index position of current /cslice/ to new value. Note that .Set can only set indexes which already exist in the slice.                                                                                                                                                                                                                                                                                                                                                                                                                               |              |
| .String                  | Stringer method for slices with string values| \checkmark   |
| .StringSlice strict-flag | Compares /slice/ contents - are they of type /string/, based on the strict-flag which is /bool/ and is by default ~false~. Under these circumstances if the element is a /string/ then those elements will be included as a part of the /[]string/ slice and rest simply ignored. Also /time.Time/ elements - their default string notation will be included. If none are /string/ an empty /[]string/ slice is returned. If strict-flag is set to ~true~ it will return /[]string/ only if *all* elements are pure /string/, else ~<no value>~ is returned. Example in this section's snippets. |              |

*** This section's snippets:
To demonstrate .StringSlice ~{{(cslice currentTime.Month 42 "PAGSTDB").StringSlice}}~ will return a slice ~[February PAGSTDB]~. If the flag would have been set to ~true~ - ~{{...).StringSlice true}}~, all elements in that slice were not strings and ~<no value>~ is returned.

General Example:
#+BEGIN_SRC go
Creating a new cslice: {{ $x := (cslice "red" "red") }} **{{ $x }}**
Appending to current cslice data
and assigning newly created cslice to same variable:
{{ $x = $x.Append "green" }} **{{ $x }}**
Setting current cslice value in position 1:
{{ $x.Set 1 "blue" }} **{{ $x }}**
Appending a slice to current cslice data
but not assigning newly created cslice to same variable:
**{{ $x.AppendSlice (cslice "yellow" "magenta") }}**
Variable is still: **{{ $x }}**
Type of variable: **{{ printf "%T" $x }}**
#+END_SRC

[[#table-of-contents][back to TOC]]
* Database
You have access to a basic set of Database functions having return of type /*customcommands.LightDBEntry/ called here [[#dbentry][DBEntry]].
This is almost a key value store ordered by the key and value combined.

You can have max 50 * user_count (or 500 * user_count for premium) values in the database, if you go above this all new write functions will fail, this value is also cached so it won't be detected immediately when you go above nor immediately when you're under again.

Patterns are basic PostgreSQL patterns, not Regexp: An underscore (_)  matches any single character; a percent sign (%) matches any sequence of zero or more characters.

Keys can be max 256 bytes long and has to be strings or numbers. Values can be anything, but if their serialized representation exceeds 256kB an error will be raised.

You can just pass a userIDof 0 to make it global (or any other number, but 0 is safe).

There can be 10 database interactions per CC, out of which dbTop/BottomEntries, dbCount, dbGetPattern, and dbDelMultiple may only be run twice. (50,10 for premium users).

Learning resources covers database [[https://learn.yagpdb.xyz/intermediate/custom-command-database][more in-depth]].

Database functions are covered in [[https://github.com/mrbentarikau/pagstrtfm/blob/master/functions.org#database][functions]].
** DBEntry

|------------+---------------------------------------------------------------------------------------------------------------------------+--------------|
| Field      | Description                                                                                                               | PAGST        |
|------------+---------------------------------------------------------------------------------------------------------------------------+--------------|
| .ID        | ID of the entry.                                                                                                          |              |
| .GuildID   | ID of the server.                                                                                                         |              |
| .UserID    | Value of ~userID~ argument or ID of the user if for example ~.User.ID~ was used for ~dbSet.~                              |              |
| .User      | User object of type /discordgo.User/ having only ~.ID~ field, .Mention is still usable with correct ~userID~ field entry. |              |
| .CreatedAt | When this entry was created.                                                                                              |              |
| .UpdatedAt | When this entry was last updated.                                                                                         |              |
| .ExpiresAt | When entry will expire.                                                                                                   |              |
| .Key       | The key of the entry.                                                                                                     |              |
| .Value     | The value of the entry.                                                                                                   |              |
| .ValueSize | Returns the entry's value size in bytes.                                                                                  | \checkmark{} |
[[#table-of-contents][back to TOC]]
* Tickets
*NB!*\\
Ticket functions are limited to 1 call per custom command for both normal and premium guilds.

|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Function                    | Description                                                                                                                                                                                                                                                              |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ~createTicket~ author topic | Creates a new ticket with the author and topic provided. Author can be ~nil~ (to use the triggering member); user ID in form of a /string/ or an /integer/; a user struct; or a member struct. The topic must be a string. Returns a template ticket  struct on success. |
** Template Ticket
|------------------------+---------------------------------------------------------------------------------------------------------------|
| Field                  | Description                                                                                                   |
|------------------------+---------------------------------------------------------------------------------------------------------------|
| .AuthorID              | Author ID of the ticket.                                                                                      |
| .AuthorUsernameDiscrim | The Discord discriminator\slash{}tag of the author of the ticket, formatted like ~username#discriminator~.    |
| .ChannelID             | Channel ID of the ticket.                                                                                     |
| .ClosedAt              | Time that the ticket was closed, of type /null.Time/. This is, for the most part, useless in custom commands. |
| .CreatedAt             | Time that the ticket was created.                                                                             |
| .GuildID               | Guild ID of the ticket.                                                                                       |
| .LocalID               | The ticket ID.                                                                                                |
| .LogsID                | LogID of the ticket.                                                                                          |
| .Title                 | Title of the ticket.                                                                                          |
[[#table-of-contents][back to TOC]]
* Time
Time and duration types use Golang's time package library and its methods > https://golang.org/pkg/time/#time and also this although slightly different syntax all applies here > https://gobyexample.com/time.
|---------------+-------------------------------------------------------------------------------------------------------------+--------------|
| Field         | Description                                                                                                 | PAGST        |
|---------------+-------------------------------------------------------------------------------------------------------------+--------------|
| .DiscordEpoch | Gives you Discord Epoch time in /time.Time/. ~{{.DiscordEpoch.Unix}}~ would return in seconds > 1420070400. |              |
| .GuildEpoch   | Guild's creation time in /time.Time/.                                                                       | \checkmark{} |
| .TimeHour     | Variable of /time.Duration/ type and returns 1 hour > ~1h0m0s~.                                             |              |
| .TimeMinute   | Variable of /time.Duration/ type and returns 1 minute > ~1m0s~.                                             |              |
| .TimeSecond   | Variable of /time.Duration/ type and returns 1 second > ~1s~.                                               |              |
| .UnixEpoch    | Gives you Unix Epoch time in /time.Time/.                                                                   |              |
Time functions are covered [[https://github.com/mrbentarikau/pagstrtfm/blob/master/functions.org#time][here]].

[[#table-of-contents][back to TOC]]
